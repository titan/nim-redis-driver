#+STARTUP: indent
* 框架
#+begin_src nim :tangle ${BUILDDIR}/tester.nim
  import unittest
  import asyncdispatch
  import options
  import redis
  import tables

  <<utilities>>

  <<sync-test-suite>>

  <<async-test-suite>>
#+end_src
* 同步测试
#+begin_src nim :noweb-ref sync-test-suite
  suite "Sync Test":
    let
      redis: Redis = open()

    setup:
      discard redis.del("hash")
      discard redis.del("list")
      discard redis.del("stream")

    teardown:
      discard

    <<sync-key-value>>

    <<sync-hash>>

    <<sync-list>>

    <<sync-stream>>
#+end_src
** key/value
#+begin_src nim :noweb-ref sync-key-value
  test "key/value":
    let setresp = redis.set("key", "value")
    let getresp = redis.get("key")
    let expireresp = redis.expire("key", 1000)
    let setexresp = redis.setex("key", "value", 1000)
    let delresp = redis.del("key")

    check:
      setresp == true
      getresp.isSome() and getresp.get() == "value"
      expireresp == true
      setexresp == true
      delresp == 1
#+end_src
** hash
#+begin_src nim :noweb-ref sync-hash
  test "hash":
    let hsetresp = redis.hset("hash", "key", "value")
    let hgetresp = redis.hget("hash", "key")
    let hlenresp = redis.hlen("hash")
    let hkeysresp = redis.hkeys("hash")
    let hmsetresp = redis.hmset("hash", @[("key1", "value1"), ("key2", "value2")])
    let hmgetresp = redis.hmget("hash", @["key", "key1", "key2", "key3"])
    let hdelresp = redis.hdel("hash", @["key", "key1", "key2"])

    check:
      hsetresp == 1
      hgetresp.isSome and hgetresp.get() == "value"
      hlenresp == 1
      len(hkeysresp) == 1 and hkeysresp[0] == "key"
      hmsetresp == true
      len(hmgetresp) == 4 and hmgetresp[0].isSome and hmgetresp[0].get() == "value" and hmgetresp[1].isSome and hmgetresp[1].get() == "value1" and hmgetresp[2].isSome and hmgetresp[2].get() == "value2" and hmgetresp[3].isNone
      hdelresp == 3
#+end_src
** list
#+begin_src nim :noweb-ref sync-list
  test "list":
    let lpushresp = redis.lpush("list", @["field1"])
    let rpushresp = redis.rpush("list", @["field2"])
    let llenresp = redis.llen("list")
    let lrangeresp = redis.lrange("list", 0, -1)
    let lrangeresp2 = redis.lrange("list", 100, 1000)
    let lpopresp = redis.lpop("list")
    let rpopresp = redis.rpop("list")

    check:
      lpushresp == 1
      rpushresp == 2
      llenresp == 2
      len(lrangeresp) == 2 and lrangeresp[0] == "field1" and lrangeresp[1] == "field2"
      len(lrangeresp2) == 0
      lpopresp.isSome and lpopresp.get() == "field1"
      rpopresp.isSome and rpopresp.get() == "field2"
#+end_src
** stream
#+begin_src nim :noweb-ref sync-stream
  test "stream":
    let xaddresp = redis.xadd("stream", @[("field1", "value1"), ("field2", "value2")], "0-1")
    discard redis.xadd("stream", @[("field3", "value3"), ("field4", "value4")], "0-2")
    let xlenresp = redis.xlen("stream")
    let xrangeresp = redis.xrange("stream", count = 10)
    let xrevrangeresp = redis.xrevrange("stream", count = 10)
    let xreadresp = redis.xread(@[("stream", "0-1")])
    let xgroupcreateresp = redis.xgroup_create("stream", "group")
    let xgroupsetidresp = redis.xgroup_setid("stream", "group", "0-0")
    let xreadgroupresp = redis.xreadgroup("group", "consumer", @[("stream", ">")])
    let xpendingresp = redis.xpending("stream", "group")
    let xpendingresp1 = redis.xpending("stream", "group", "0-1", "0-2", 1, "consumer")
    let xclaimresp = redis.xclaim("stream", "group", "consumer", 0, @["0-1"])
    let xackresp = redis.xack("stream", "group", @["0-1"])
    let xgroupdelconsumerresp = redis.xgroup_delconsumer("stream", "group", "consumer")
    let xgroupdestroyresp = redis.xgroup_destroy("stream", "group")
    let xtrimresp = redis.xtrim("stream", 100)
    let xdelresp = redis.xdel("stream", @["0-1", "0-2"])

    check:
      xaddresp.isSome and xaddresp.get() == "0-1"
      xlenresp == 2
      len(xrangeresp) == 2 and xrangeresp[0][0] == "0-1" and xrangeresp[1][0] == "0-2"
      len(xrevrangeresp) == 2 and xrevrangeresp[0][0] == "0-2" and xrevrangeresp[1][0] == "0-1"
      len(xreadresp) == 1 and xreadresp[0][0] == "stream" and xreadresp[0][1][0][0] == "0-2" and xreadresp[0][1][0][1]["field3"] == "value3" and xreadresp[0][1][0][1]["field4"] == "value4"
      xgroupcreateresp == true
      xgroupsetidresp == true
      len(xreadgroupresp) == 1 and xreadgroupresp[0][0] == "stream" and len(xreadgroupresp[0][1]) == 2 and xreadgroupresp[0][1][0][0] == "0-1" and xreadgroupresp[0][1][0][1]["field1"] == "value1" and xreadgroupresp[0][1][0][1]["field2"] == "value2" and xreadgroupresp[0][1][1][0] == "0-2" and xreadgroupresp[0][1][1][1]["field3"] == "value3" and xreadgroupresp[0][1][1][1]["field4"] == "value4"
      xpendingresp[0] == 2 and xpendingresp[1] == "0-1" and xpendingresp[2] == "0-2" and len(xpendingresp[3]) == 1 and xpendingresp[3][0][0] == "consumer" and xpendingresp[3][0][1] == 2
      len(xpendingresp1) == 1 and xpendingresp1[0][0] == "0-1" and xpendingresp1[0][1] == "consumer"
      len(xclaimresp) == 1 and xclaimresp[0][0] == "0-1" and xclaimresp[0][1]["field1"] == "value1" and xclaimresp[0][1]["field2"] == "value2"
      xackresp == 1
      xgroupdelconsumerresp == 1
      xgroupdestroyresp == 1
      xtrimresp == 0
      xdelresp == 2
#+end_src
* 异步测试
#+begin_src nim :noweb-ref async-test-suite
  suite "Async Test":
    let
      redis: AsyncRedis = waitFor open_async()

    setup:
      discard waitFor redis.del("hash")
      discard waitFor redis.del("list")
      discard waitFor redis.del("stream")

    teardown:
      discard

    <<async-key-value>>

    <<async-hash>>

    <<async-list>>

    <<async-stream>>
#+end_src
** key/value
#+begin_src nim :noweb-ref async-key-value
  test "key/value":
    let setresp = waitFor redis.set("key", "value")
    let getresp = waitFor redis.get("key")
    let expireresp = waitFor redis.expire("key", 1000)
    let setexresp = waitFor redis.setex("key", "value", 1000)
    let delresp = waitFor redis.del("key")

    check:
      setresp == true
      getresp.isSome() and getresp.get() == "value"
      expireresp == true
      setexresp == true
      delresp == 1
#+end_src
** hash
#+begin_src nim :noweb-ref async-hash
  test "hash":
    let hsetresp = waitFor redis.hset("hash", "key", "value")
    let hgetresp = waitFor redis.hget("hash", "key")
    let hlenresp = waitFor redis.hlen("hash")
    let hkeysresp = waitFor redis.hkeys("hash")
    let hmsetresp = waitFor redis.hmset("hash", @[("key1", "value1"), ("key2", "value2")])
    let hmgetresp = waitFor redis.hmget("hash", @["key", "key1", "key2", "key3"])
    let hdelresp = waitFor redis.hdel("hash", @["key", "key1", "key2"])

    check:
      hsetresp == 1
      hgetresp.isSome and hgetresp.get() == "value"
      hlenresp == 1
      len(hkeysresp) == 1 and hkeysresp[0] == "key"
      hmsetresp == true
      len(hmgetresp) == 4 and hmgetresp[0].isSome and hmgetresp[0].get() == "value" and hmgetresp[1].isSome and hmgetresp[1].get() == "value1" and hmgetresp[2].isSome and hmgetresp[2].get() == "value2" and hmgetresp[3].isNone
      hdelresp == 3
#+end_src
** list
#+begin_src nim :noweb-ref async-list
  test "list":
    let lpushresp = waitFor redis.lpush("list", @["field1"])
    let rpushresp = waitFor redis.rpush("list", @["field2"])
    let llenresp = waitFor redis.llen("list")
    let lrangeresp = waitFor redis.lrange("list", 0, -1)
    let lrangeresp2 = waitFor redis.lrange("list", 100, 1000)
    let lpopresp = waitFor redis.lpop("list")
    let rpopresp = waitFor redis.rpop("list")

    check:
      lpushresp == 1
      rpushresp == 2
      llenresp == 2
      len(lrangeresp) == 2 and lrangeresp[0] == "field1" and lrangeresp[1] == "field2"
      len(lrangeresp2) == 0
      lpopresp.isSome and lpopresp.get() == "field1"
      rpopresp.isSome and rpopresp.get() == "field2"
#+end_src
** stream
#+begin_src nim :noweb-ref async-stream
  test "stream":
    let xaddresp = waitFor redis.xadd("stream", @[("field1", "value1"), ("field2", "value2")], "0-1")
    discard waitFor redis.xadd("stream", @[("field3", "value3"), ("field4", "value4")], "0-2")
    let xlenresp = waitFor redis.xlen("stream")
    let xrangeresp = waitFor redis.xrange("stream", count = 10)
    let xrevrangeresp = waitFor redis.xrevrange("stream", count = 10)
    let xreadresp = waitFor redis.xread(@[("stream", "0-1")])
    let xgroupcreateresp = waitFor redis.xgroup_create("stream", "group")
    let xgroupsetidresp = waitFor redis.xgroup_setid("stream", "group", "0-0")
    let xreadgroupresp = waitFor redis.xreadgroup("group", "consumer", @[("stream", ">")])
    let xpendingresp = waitFor redis.xpending("stream", "group")
    let xpendingresp1 = waitFor redis.xpending("stream", "group", "0-1", "0-2", 1, "consumer")
    let xclaimresp = waitFor redis.xclaim("stream", "group", "consumer", 0, @["0-1"])
    let xackresp = waitFor redis.xack("stream", "group", @["0-1"])
    let xgroupdelconsumerresp = waitFor redis.xgroup_delconsumer("stream", "group", "consumer")
    let xgroupdestroyresp = waitFor redis.xgroup_destroy("stream", "group")
    let xtrimresp = waitFor redis.xtrim("stream", 100)
    let xdelresp = waitFor redis.xdel("stream", @["0-1", "0-2"])

    check:
      xaddresp.isSome and xaddresp.get() == "0-1"
      xlenresp == 2
      len(xrangeresp) == 2 and xrangeresp[0][0] == "0-1" and xrangeresp[1][0] == "0-2"
      len(xrevrangeresp) == 2 and xrevrangeresp[0][0] == "0-2" and xrevrangeresp[1][0] == "0-1"
      len(xreadresp) == 1 and xreadresp[0][0] == "stream" and xreadresp[0][1][0][0] == "0-2" and xreadresp[0][1][0][1]["field3"] == "value3" and xreadresp[0][1][0][1]["field4"] == "value4"
      xgroupcreateresp == true
      xgroupsetidresp == true
      len(xreadgroupresp) == 1 and xreadgroupresp[0][0] == "stream" and len(xreadgroupresp[0][1]) == 2 and xreadgroupresp[0][1][0][0] == "0-1" and xreadgroupresp[0][1][0][1]["field1"] == "value1" and xreadgroupresp[0][1][0][1]["field2"] == "value2" and xreadgroupresp[0][1][1][0] == "0-2" and xreadgroupresp[0][1][1][1]["field3"] == "value3" and xreadgroupresp[0][1][1][1]["field4"] == "value4"
      xpendingresp[0] == 2 and xpendingresp[1] == "0-1" and xpendingresp[2] == "0-2" and len(xpendingresp[3]) == 1 and xpendingresp[3][0][0] == "consumer" and xpendingresp[3][0][1] == 2
      len(xpendingresp1) == 1 and xpendingresp1[0][0] == "0-1" and xpendingresp1[0][1] == "consumer"
      len(xclaimresp) == 1 and xclaimresp[0][0] == "0-1" and xclaimresp[0][1]["field1"] == "value1" and xclaimresp[0][1]["field2"] == "value2"
      xackresp == 1
      xgroupdelconsumerresp == 1
      xgroupdestroyresp == 1
      xtrimresp == 0
      xdelresp == 2
#+end_src
* 辅助方法
** 框架
#+begin_src nim :noweb-ref utilities
#+end_src
